@attribute [Route(PageRoutes.AddImages)]
@namespace Art.UI
@using System.Buffers.Text
@inject Settings mSettings
@inject IImagesService mImageService
@inject IDataAccessService mDataAccessService

<PageTitle>Add Images</PageTitle>


<div class="pb-5 pt-5">
    <div class="ms-4 mb-2 text-light">Files Available: @mPreviewImages.Count()</div>
    <div class="ms-4 mb-2 text-light">Current Batch: @(mBatchIndex + 1)</div>
    <div class="ms-5 mb-2 text-light">- Failed Reads: @mCurrentBatch.Count(x => !x.FileSuccessfullyRead)</div>
    <div class="ms-5 mb-2 text-light">- Files In Batch: @mCurrentBatch.Count()</div>
    <div class="ms-5">
        <span class="me-2 text-light">- Batch Size: </span>
        <InputNumber @bind-Value="mBatchSize" min="0" style="width:96px;"></InputNumber>
    </div>
    <div class="ms-5 mt-2">
        <span class="me-2 text-light">- Start Date: </span>
        <InputDate @bind-Value="mStartDate"></InputDate>
    </div>
    <div class="ms-5 mt-2">
        <span class="mb-2 me-2 text-light">- End Date: </span>
        <InputDate @bind-Value="mEndDate"></InputDate>
    </div>




    <InputFile OnChange="FileChanged" multiple class="d-block mt-3 mb-4 mx-4"></InputFile>

    <button class="ms-4 mb-3 btn btn-light" @onclick="PreviousBatch">previous batch</button>
    <button class="ms-4 mb-3 btn btn-light" @onclick="NextBatch">next batch</button>
    <button class="ms-4 mb-3 btn btn-primary" @onclick="UploadAsync">upload batch</button>


    <div class=" text-center mt-4">
        @foreach(var image in mCurrentBatch)
        {
            <div class="d-inline-block mt-5 mx-4">
                <img src="data:@image.ContentType;base64, @image.Base64EncodedContent" style="width:200px;" />
                <div class="text-light mt-2" style="width:200px; text-overflow:ellipsis; overflow:hidden;">Filename: @image.FileName</div>
                <div class="text-light mt-2">File Size: @FileSize(image)</div>
                <div class="text-light mt-2">@image.ContentType</div>
                @if(image.FileSuccessfullyRead)
                {
                    <div class="text-light mt-3 bg-success rounded rounded-2 px-1 py-2">Read</div>
                }
                else
                {
                    <div class="text-light mt-3 bg-danger rounded rounded-2 px-1 py-2">File not read</div>
                }
                @if(IsFileUploaded[image.Index])
                {
                    <div class="text-light mt-3 bg-primary rounded rounded-2 px-1 py-2">Uploaded</div>
                }
                else
                {
                    <div class="text-light mt-3 bg-gradient rounded rounded-2 px-1 py-2">Not Yet Uploaded</div>
                }
            </div>
        }
    </div>
</div>