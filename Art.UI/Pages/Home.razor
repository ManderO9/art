@attribute [Route(PageRoutes.Home)]
@namespace Art.UI
@inject IImagesService mImageService
@inject ILikeService mLikeService
@inject NavigationManager mNavigationManager
@inject IClipboardService mClipboardService

<PageTitle>Home</PageTitle>

<div class="m-auto bg-dark pb-5" style="max-width:600px;">
    @if(mImages is not null)
    {
        @foreach(var image in mImages)
        {
            <div class="mb-3 pb-2 bg-dark shadow-lg">
                        <img loading="lazy" class="displayed-image vw-100 mb-2"
                     data-id="@image.Id"
                     style="max-width:600px; min-height:500px;"
                     src="@mImageService.GetImageUrl(image)"
                     @ondblclick="()=>LikeImage(image)" />

                @if(image.IsLiked)
                {
                    <img class="ms-2" role="button" @onclick="()=>LikeImage(image)" src="./Assets/Images/heart-filled.svg" />
                }
                else
                {
                    <img class="ms-2" role="button" @onclick="()=>LikeImage(image)" src="./Assets/Images/heart.svg" />
                }
                <a href="@mImageService.GetImageUrl(image)" download>
                    <img class="ms-2" role="button" src="./Assets/Images/download.svg" />
                </a>
                <img class="ms-1" role="button" src="./Assets/Images/send.svg" @onclick="()=>ShareImage(image)" />
                @if(image.IsShared)
                {
                    <span class="text-light ms-2">Copied to clipboard</span>
                }
            </div>
        }

        <div class="text-center pt-4 pb-3">
            <button class="btn btn-light"
                    @onclick="async () => mImages.AddRange(await mImageService.GetRandomImagesAsync(40))">
                Load more
            </button>
        </div>

        <script>
            // Get the images to observe
            const images = document.querySelectorAll(".displayed-image");

            // Set the options of the intersection observer
            const options = {
                threshold: 0.2,
                rootMargin: "0px"
            }

            // Create a new intersection observer
            const observer = new IntersectionObserver(function (entries, observer) {
                // For each element observe that element
                entries.forEach(entry => {
                    // If the entry is intersecting
                    if (entry.isIntersecting) {
                        // Call the add to history method
                        DotNet.invokeMethodAsync('Art.UI', 'AddToHistoryAsync', entry.target.dataset.id);

                        // Unobserve the entry
                        observer.unobserve(entry.target);
                    }

                });
            }, options);

            // For each card
            images.forEach(element => {
                // Observe that element
                observer.observe(element);
            });

        </script>
    }
</div>
